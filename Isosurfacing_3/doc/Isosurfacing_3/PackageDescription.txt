/// \defgroup PkgIsosurfacing3Ref 3D Isosurfacing Reference
/// \defgroup PkgIsosurfacing3Concepts Concepts
/// \ingroup PkgIsosurfacing3Ref

/*!
\addtogroup PkgIsosurfacing3Ref
\cgalPkgDescriptionBegin{3D Isosurfacing,PkgIsosurfacing3}
\cgalPkgPicture{isosurfacing3_ico.png}
\cgalPkgSummaryBegin
\cgalPkgAuthor{Julian Stahl and Daniel Zint}
\cgalPkgDesc{This package implements several variations of the marching cubes algorithm to generate a triangle meshes out of a voxel grid. }
\cgalPkgManuals{Chapter_Isosurfacing3,PkgIsosurfacing3Ref}
\cgalPkgSummaryEnd
\cgalPkgShortInfoBegin
\cgalPkgSince{5.7}
\cgalPkgBib{cgal:sz-mc}
\cgalPkgLicense{\ref licensesGPL "GPL"}
\cgalPkgDemo{Polyhedron demo,polyhedron_3.zip}
\cgalPkgShortInfoEnd
\cgalPkgDescriptionEnd

This package provides algorithms to extract isosurfaces from different inputs.
The input is represented as a domain and can be an implicit function, a cartesion grid, or an octree.
The output is an indexed face set that stores an isosurface in the form of a surface mesh.
Available algorithms include Marching Cubes, Dual Contouring, and others.

\cgalClassifedRefPages

\cgalCRPSection{Concepts}
- `IsosurfacingDomain`
- `IsosurfacingDomainWithGradient`

\cgalCRPSection{Classes}

\cgalCRPSection{Free Functions}

- `CGAL::Isosurfacing::marching_cubes()`
- `CGAL::Isosurfacing::dual_contouring()`
- `CGAL::Isosurfacing::create_explicit_cartesian_grid_domain()`
- `CGAL::Isosurfacing::create_implicit_cartesian_grid_domain()`

*/
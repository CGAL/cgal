namespace CGAL {
/*!

\mainpage User Manual
\anchor Chapter_CT_3
\anchor userchapterct3

\cgalAutoToc
\author Laurent Rineau and Jane Tournois

\cgalFigureAnchor{CT_3_pyramid_fig}
<img src="cdt_title_pyramid.png" style="max-width:60%;min-width=20%"/>
<BR>

\section CT_3_CCDT_3 Constrained Triangulations in 3D

3D triangulations partition space and are useful in many applications. In some cases, it is
important to ensure that specific faces, such as sharp features, are preserved in the output.
When a triangulation exactly respects these constraints, it is called a _constrained_ triangulation.
However, it is sometimes only possible to preserve the geometry of the constraints, not their exact
combinatorics; in such cases, additional points—called Steiner points—must be inserted. This process
results in a _conforming_ triangulation.

This package implements an algorithm for constructing conforming triangulations of 3D polygonal
constraints. Specifically, it requires that these piecewise linear constraints are provided as a
_Piecewise Linear Complex_&nbsp;(PLC). The resulting triangulations are of type `Triangulation_3`,
as described in the chapter \ref PkgTriangulation3.

The article by Cohen-Steiner et al. \cgalCite{cgal:cohen2002conforming} discusses the problem of
constructing conforming Delaunay triangulations and proposes an algorithm to address it.
Si's work \cgalCite{cgal:si2008cdt3} presents an algorithm for computing conforming constrained
Delaunay triangulations in 3D.

\section CT_3_definitions Definitions

This section introduces the key concepts necessary to understand and use this package effectively.

\subsection CT_3_PLC Piecewise Linear Complex

A _Piecewise Linear Complex_ (PLC) is the three-dimensional generalization of a
planar straight-line graph. It consists of a finite set of vertices, edges, and polygons (facets)
that satisfy the following properties:

- The vertices and edges of the PLC form a simplicial complex: two edges may intersect only at a
  shared vertex.
- The boundary of each polygon (facet) in the PLC is an ordered list of vertices from the PLC, forming
  one or more closed loops (for holes).
- If two polygons in the PLC intersect, their intersection is a union of edges and vertices from the
  PLC. In particular, the interiors of two polygons cannot overlap.

Polygons in a PLC may be non-convex, may have holes, and may have arbitrarily many boundary segments.

\cgalFigureAnchor{CT_3_plc_fig}
<center>
<img src="plc.png" style="max-width:60%;"/>
</center>
\cgalFigureCaptionBegin{CT_3_plc_fig}
A Piecewise Linear Complex composed of planar facets connected by edges and vertices.
\cgalFigureCaptionEnd


\subsection CT_3_CDT Conforming Constrained Delaunay Triangulation

The goal of the algorithms developed in this package is to compute a constrained Delaunay
triangulation that contains a given set of polygonal constraints in 3D as a subcomplex.

A triangulation is a _Delaunay triangulation_ if the circumscribing sphere of any simplex
in the triangulation contains no vertex in its interior (see package \ref PkgTriangulation3
for more details on Delaunay triangulations).

A _constrained Delaunay triangulation_ of a PLC is a constrained triangulation that is as close as
possible to being Delaunay, given that some facets are marked as _constrained_. More precisely, a
triangulation is _constrained Delaunay_ if, for any simplex \f$s\f$ of the triangulation, the
interior of its circumscribing sphere contains no vertex of the triangulation that is _visible_ from
any point in the interior of the simplex \f$s\f$. Two points are _visible_ if the open line segment
joining them does not intersect any polygon of the PLC, except for polygons that are coplanar with
the segment.

In 3D, constrained triangulations do not always exist. This can be demonstrated using the example of
Sch&ouml;nhardt polyhedra \cgalCite{schonhardt1928zerlegung}, \cgalCite{b-ip-48a}, which require the
addition of Steiner vertices to become tetrahedralizable (see \cgalFigureRef{CT_3_schonhardt_fig}).

\cgalFigureAnchor{CT_3_schonhardt_fig}
<center>
<img src="schonhardt.png" style="max-width:40%;"/>
</center>
\cgalFigureCaptionBegin{CT_3_schonhardt_fig}
A Sch&ouml;nhardt polyhedron.
\cgalFigureCaptionEnd


Shewchuk \cgalCite{cgal:shewchuk1998condition} demonstrated that for any PLC, there exists a refined
version of the original PLC that admits a constrained Delaunay triangulation. This refinement is
achieved by adding Steiner vertices to the input edges and polygons. The constrained triangulation
built on this refined PLC is known as a _conforming constrained Delaunay triangulation_ (CCDT for short).

The algorithm implemented in this package is based on the work of Hang Si \cgalCite{si2005meshing},
\cgalCite{si2015tetgen}. Steiner vertices are inserted on the input edges and polygons of the PLC to
ensure it can be tetrahedralized.

\cgalFigureRef{CT_3_plc2cdt_fig} illustrates an example of a conforming constrained
Delaunay triangulation constructed from a PLC.

\cgalFigureAnchor{CT_3_plc2cdt_fig}
<center>
<img src="plc_to_cdt.png" style="max-width:90%;"/>
</center>
\cgalFigureCaptionBegin{CT_3_plc2cdt_fig}
Left: PLC (360 vertices);
Middle: CCDT (2452 vertices);
Right: the same CCDT seen with cutplane.
\cgalFigureCaptionEnd


\section CT_3_api Software Design

\subsection CT_3_representation_of_PLCs Representation of Piecewise Linear Complexes

There is no universal or canonical way to represent all possible PLCs in \cgal.

Since any polyhedron is a PLC, any model of `FaceListGraph`, such as `CGAL::Surface_mesh`, can be
used to represent a PLC.
In this case, the polygons of the PLC correspond to the faces of the
surface _mesh_, a collection of vertices (points), edges, and facets covering the surface of a
a geometric object.
The edges of the PLC correspond to the edges of the surface mesh. However, PLCs
represented in this way are restricted to be manifold, and their facets cannot have holes.

A PLC can also be represented as a polygon soup: a collection of vertices and a set of polygons, where
each polygon is defined by an ordered list of vertices, and the connectivity information is not
explictly provided.
For a polygon soup to represent a valid PLC,
its polygons must satisfy the properties outlined in the previous section. This approach allows for
the representation of non-manifold geometries, but note that polygons in a polygon soup cannot have
holes.

This package provides a way to group polygons into distinct surface patches using a property map.
Each polygon is assigned a _patch_ identifier, allowing multiple polygons to form a continuous surface patch,
which may include holes. When these patches are planar and meet the necessary geometric conditions,
they can be used to construct a conforming constrained Delaunay triangulation.
When a  property map is provided:
- The vertices of the PLC are the ones from the original surface mesh or polygon soup.
- The edges of the PLC are those that belong to the surface mesh or polygon soup and have only one adjacent facet, specifically those marking the boundary of patches.
- The surface patches themselves serve as the polygons (facets) in the resulting representation.

\subsection CT_3_api_classes Classes

This package provides a primary class, `CGAL::Conforming_constrained_Delaunay_triangulation_3`.
This class is templated by a
geometric traits class and an underlying triangulation class, allowing for flexibility and
customization.

In addition to the main class, the package includes several auxiliary classes that define the types
of vertices, cells, and associated metadata used within the triangulation. These supporting classes
enable users to extend or adapt the triangulation data structure to their specific needs.

\subsection CT_3_api_functions Functions

Several helper constructor functions are provided, such as \link
PkgConstrainedTriangulation3FunctionsPolygonSoupOrMesh
`CGAL::make_conforming_constrained_Delaunay_triangulation_3()`\endlink, to facilitate the creation
of a `CGAL::Conforming_constrained_Delaunay_triangulation_3` object from various types of input
data.

\section CT_3_examples Examples

\subsection CT_3_example_ccdt Build a Conforming Constrained Delaunay Triangulation

The following example illustrates how to use the helper function
`CGAL::make_conforming_constrained_Delaunay_triangulation_3()` to construct a conforming constrained
Delaunay triangulation from a given PLC.

\cgalExample{Constrained_triangulation_3/conforming_constrained_Delaunay_triangulation_3.cpp }


\subsection CT_3_example_ccdt_soup Build a Conforming Constrained Delaunay Triangulation from a Polygon Soup

You can also construct a conforming constrained Delaunay triangulation from a polygon soup. The
following example demonstrates how to build such a triangulation.

\cgalExample{Constrained_triangulation_3/ccdt_3_from_soup.cpp }


\subsection CT_3_example_ccdt_fimap Build a Conforming Constrained Delaunay Triangulation with Known Polygon Identifiers

If the user already knows the set of polygon identifiers to associate with each PLC facet, this information can be
provided and preserved throughout the construction of the conforming constrained Delaunay
triangulation.

The following example demonstrates how to detect planar surface patches, remesh them as coarsely
as possible, and use
this segmentation during the tetrahedralization process.

When the named parameter `plc_facet_id` is specified, each constrained facet in the 3D triangulation
is assigned to the corresponding input PLC facet, identified in the provided property map.
If this parameter is not specified, each input polygon, or PLC facet, is given a unique facet index.

\cgalExample{Constrained_triangulation_3/conforming_constrained_Delaunay_triangulation_3_fimap.cpp}

\cgalFigureRef{CT_3_ccdt_fimap_fig} shows the input and output of this triangulation construction example.

\cgalFigureAnchor{CT_3_ccdt_fimap_fig}
<center>
<img src="ccdt_fpmap.png" style="max-width:75%;"/>
\cgalFigureCaptionBegin{CT_3_ccdt_fimap_fig}
From left to right: Input PLC;
 The corresponding conforming constrained Delaunay triangulation with one patch per input polygon;
 Input PLC segmented according to sharp edges;
 The corresponding conforming constrained Delaunay triangulation using the segmentation.
\cgalFigureCaptionEnd
</center>
<!-- #camera 5.67784 5.7193 -5.46546 0.830007 -0.459002 0.09482 -0.302349 -->


\subsection CT_3_example_ccdt_region_growing_fimap Build a Conforming Constrained Delaunay Triangulation with Detected Polygon Identifiers

If the user does not know the set of polygon identifiers to associate with each PLC facet, this information can be
detected using the \link CGAL::Polygon_mesh_processing::region_growing_of_planes_on_faces(const PolygonMesh& mesh,RegionMap region_map,const NamedParameters& np = parameters::default_values()) CGAL::Polygon_mesh_processing::region_growing_of_planes_on_faces()`\endlink
function from the \ref PkgPolygonMeshProcessing package.

The following example demonstrates how to detect planar surface patches, and build a conforming
constrained Delaunay triangulation using the detected segmentation, using the
the named parameter `plc_facet_id` to associate each facet of the triangulation with the
corresponding input PLC facet.

\cgalExample{Constrained_triangulation_3/ccdt_3_fimap_region_growing.cpp}


\subsection CT_3_examples_preprocessing Preprocessing the Input for Conforming Constrained Delaunay Triangulations

Given a PLC, the algorithms in this package can construct a conforming constrained Delaunay, provided
the input surface can be represented as a valid surface mesh or set of surface meshes,
and does not contain self-intersections.
Numerous preprocessing functions are available in the \ref PkgPolygonMeshProcessing package to enforce these
preconditions.

\subsubsection CT_3_example_ccdt_autorefinement Autorefinement of the Input Mesh

The following examples shows how autorefinement can be used to preprocess the input mesh,
when it is self-intersecting.

\cgalExample{Constrained_triangulation_3/ccdt_3_after_autorefinement.cpp }


\subsubsection CT_3_example_self_intersecting_non_triangles Non-Triangulated Self-Intersecting Input Mesh

The following example demonstrates how to construct a conforming constrained Delaunay triangulation from
an input mesh that is not triangulated and may contain self-intersections.

The function `CGAL::Polygon_mesh_processing::does_self_intersect()` can be used to detect self-intersections,
but it requires the input mesh to be triangulated. Therefore, the input mesh must first be triangulated
using `CGAL::Polygon_mesh_processing::triangulate_faces()` before performing the self-intersection check.

If self-intersections are found, the triangulated mesh is converted into a triangle soup, which can then be
processed with `CGAL::Polygon_mesh_processing::autorefine_triangle_soup()` to resolve the self-intersections.

\cgalExample{Constrained_triangulation_3/ccdt_3_preprocessing.cpp }


\subsection CT_3_example_remesh Remeshing a Conforming Constrained Delaunay Triangulation

After constructing the triangulation, you can improve its quality or adapt it to a specific sizing
field by applying the `CGAL::tetrahedral_isotropic_remeshing()` function from the \ref
PkgTetrahedralRemeshing package.

The following example demonstrates how to remesh a conforming constrained Delaunay triangulation.

\cgalExample{Constrained_triangulation_3/remesh_constrained_Delaunay_triangulation_3.cpp }


\section CT_3_design Implementation History

The initial version of this package was implemented by Laurent Rineau and released in
\cgal&nbsp;6.1&nbsp;(2025). Its design and algorithms are grounded in the theoretical work of
Hang&nbsp;Si on meshing algorithms&nbsp;\cgalCite{si2005meshing},&nbsp;\cgalCite{si2015tetgen}.

*/
} /* namespace CGAL */

namespace CGAL {
/*!

\mainpage User Manual
\anchor Chapter_CT_3
\anchor userchapterct3

\cgalAutoToc
\author Laurent Rineau and Jane Tournois

\image html vase_cdt.png
\image latex vase_cdt.png
<BR>

\section CT_3_CCDT_3 Conforming Delaunay Triangulations in 3D

This package implements the construction of a 3D constrained Delaunay triangulation,
conforming to the set of faces of a Piecewise Linear Complex.
The set of input polygonal constraints given as a PLC is meant to be represented as a
sub-complex of the triangulation.

For any Piecewise Linear Complex (PLC) in 3D,
the algorithm builds a constrained Delaunay triangulation conforming to this PLC.
The constrained triangulation does not always exist, and it may be necessary
to add Steiner vertices to the PLC to make it tetrahedralizable.

The problem is described by Cohen-Steiner et al \cgalCite{cgal:cohen2002conforming},
and by Si \cgalCite{cgal:si2008cdt3}.


\section CT_3_definitions Definitions

In this section, we define the main concepts that have to be understood to use this package.

\subsection CT_3_PLC Piecewise Linear Complex

A _Piecewise Linear Complex_ (PLC) is the 3-dimensional generalization of a
planar straight-line graph. It is a finite set of vertices, edges, and polygons (facets)
that satisfies the following properties:

- The vertices and edges in the PLC form a simplicial complex: every edge in the PLC has
  both its endpoints (vertices) in the PLC, and the relative interior of any edge in the
  PLC does not intersect any vertex or any other edge in the PLC.
- For each polygon (facet) in the PLC, its boundary is a union of edges in the PLC.
- If two polygons in the PLC intersect, their intersection is a union of edges and vertices
  in the PLC. In particular, the interiors of two polygons cannot intersect.

The polygons (facets) can be non-convex, have holes, and as many boundary segments as needed.

\cgalFigureBegin{plc_fig, plc.png}
A Piecewise Linear Complex, made of planar faces, connected by edges and vertices.
\cgalFigureEnd

\subsection CT_3_CDT Conforming Delaunay Triangulation

The goal of the algorithms developed in this package is to compute a constrained Delaunay
mesh containing a given set of polygonal constraints in 3D as sub-complex.
See package \ref PkgTriangulation3 for more details on Delaunay triangulations.

A triangulation is a _Delaunay triangulation_ if the circumscribing sphere of any simplex
of the triangulation contains no vertex in its interior.
A _constrained Delaunay triangulation_ of a PLC is a constrained triangulation which is as much
Delaunay as possible, given that some facets are marked as _constrained_. More precisely, a
triangulation is _constrained Delaunay_ if for any simplex \f$s\f$ of the triangulation,
the interior of its circumscribing sphere contains no vertex of the triangulation that is
_visible_ from any point of the interior of the simplex \f$s\f$. Two points are _visible_
if the open line segment joining them does not intersect any polygon of the PLC, with the exception
of polygons that are coplanar with the segment.

In 3D, constrained triangulations do not always exist. It can be shown using the
example of the Sch&ouml;nhardt polyhedra \cgalCite{schonhardt1928zerlegung},
\cgalCite{b-ip-48a}, that requires the addition of
Steiner vertices to be tetrahedralizable (see Figure \cgalFigureRef{schonhardt_fig}).

\cgalFigureBegin{schonhardt_fig, schonhardt.png}
A Sch&ouml;nhardt polyhedron.
\cgalFigureEnd

Shewchuk \cgalCite{cgal:shewchuk1998condition} showed that for any PLC,
there exists another PLC that is a refined version of the original one,
that admits a constrained Delaunay triangulation.
The refined PLC is obtained by adding Steiner vertices on the input edges and facets,
and the constrained triangulation built on this PLC is called
a _conforming Delaunay triangulation_.

The algorithm implemented in this package is based on the work of
Hang Si \cgalCite{si2005meshing}, \cgalCite{si2015tetgen}.
Steiner vertices are added on input edges and input facets
of the PLC to make it tetrahedralizable.

Figure \cgalFigureRef{plc2cdt_fig} shows an example of a conforming constrained
Delaunay triangulation constructed from a PLC.


\cgalFigureBegin{plc2cdt_fig, plc_to_cdt.png}
Left : PLC (360 vertices);
Middle : CCDT (2452 vertices);
Right : the same CCDT seen with cutplane.
\cgalFigureEnd


\section CT_3_api API

\subsection CT_3_api_classes Classes

This package provides one main class `Conforming_constrained_Delaunay_triangulation_3`
that represents a 3D conforming constrained Delaunay triangulation.
The class is templated by the geometric traits class and the underlying triangulation class.
The other classes that are provided are secondary classes that define the
vertex and cell types and metadata that constitute the triangulation.

\subsection CT_3_api_functions Functions

Some helper constructor functions, like `make_conforming_constrained_Delaunay_triangulation_3()`,
are provided to create a `Conforming_constrained_Delaunay_triangulation_3` object.

\section CT_3_examples Examples

\subsection CT_3_example_ccdt Build a Conforming Constrained Delaunay Triangulation

The following example demonstrates how to use the helper constructor function
`make_conforming_constrained_Delaunay_triangulation_3()` to create a
conforming constrained Delaunay triangulation from a given PLC.

\cgalExample{Constrained_triangulation_3/conforming_constrained_Delaunay_triangulation_3.cpp }


\subsection CT_3_example_ccdt_soup Build a Conforming Constrained Delaunay Triangulation from a Polygon Soup

It is also possible to create a conforming constrained Delaunay triangulation
from a polygon soup, i.e., a set of polygons for which the connectivity is not known a priori.
This example demonstrates how to build such a triangulation.

\cgalExample{Constrained_triangulation_3/conforming_constrained_Delaunay_triangulation_3_from_soup.cpp }


\subsection CT_3_example_ccdt_fpmap Build a Conforming Constrained Delaunay Triangulation with Known Face Patches

When the user knows a priori the set of patch ids that he wants to attach to faces, this information
can be used and kept valid through the construction of the conforming constrained
Delaunay triangulation.

The following example demonstrates how to detect surface patches separated by sharp edges
and use this surface segmentation in the tetrahedrization process.

When this parameter is used, the 3D triangulation constrained faces indices (available with
`face_constraint_index()` in `Conforming_constrained_Delaunay_triangulation_cell_data_3`)
are set to the corresponding patch ids from this map.
When it is not used, the face indices are set to different indices for each input facet.

\cgalExample{Constrained_triangulation_3/conforming_constrained_Delaunay_triangulation_3_fpmap.cpp}

Figure \cgalFigureRef{ccdt_fpmap} shows the input and output of this triangulation construction example.

\cgalFigureBegin{ccdt_fpmap, ccdt_fpmap.png}
(Left) Input PLC;
(Middle-left) The corresponding conforming constrained Delaunay triangulation with one patch per input face;
(Middle-Right) Input PLC segmented according to sharp edges;
(Right) The corresponding conforming constrained Delaunay triangulation using the segmentation.
\cgalFigureEnd
<!-- #camera 5.67784 5.7193 -5.46546 0.830007 -0.459002 0.09482 -0.302349 -->


\subsection CT_3_example_remesh Remeshing a Conforming Constrained Delaunay Triangulation

Once the triangulation is built, it is possible to remesh it using the
`CGAL::tetrahedral_isotropic_remeshing()` function from the \ref PkgTetrahedralRemeshing package
to improve the quality of the mesh or adapt it to a given sizing field.

The following example shows how to remesh a conforming constrained Delaunay triangulation.

\cgalExample{Constrained_triangulation_3/remesh_constrained_Delaunay_triangulation_3.cpp }


\section CT_3_design Implementation History

The first version of this package was implemented by Laurent Rineau, and published in 2025 in CGAL 6.1. It is based on the theoretical foundation provided by Hang Si's work on meshing algorithms
\cgalCite{si2005meshing}, \cgalCite{si2015tetgen}.

*/
} /* namespace CGAL */

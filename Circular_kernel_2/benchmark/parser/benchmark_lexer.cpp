/* SPDX-License-Identifier: GPL-2.0-or-later */

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Id$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else        /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif        /* __STDC__ */
#endif        /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *         if ( condition_holds )
 *                yyless( 5 );
 *        else
 *                do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
        do \
                { \
                /* Undo effects of setting up yytext. */ \
                *yy_cp = yy_hold_char; \
                YY_RESTORE_YY_MORE_OFFSET \
                yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
                YY_DO_BEFORE_ACTION; /* set up yytext again */ \
                } \
        while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
        {
        FILE *yy_input_file;

        char *yy_ch_buf;                /* input buffer */
        char *yy_buf_pos;                /* current position in input buffer */

        /* Size of input buffer in bytes, not including room for EOB
         * characters.
         */
        yy_size_t yy_buf_size;

        /* Number of characters read into yy_ch_buf, not including EOB
         * characters.
         */
        int yy_n_chars;

        /* Whether we "own" the buffer - i.e., we know we created it,
         * and can realloc() it to grow it, and should free() it to
         * delete it.
         */
        int yy_is_our_buffer;

        /* Whether this is an "interactive" input source; if so, and
         * if we're using stdio for input, then we want to use getc()
         * instead of fread(), to make sure we stop fetching input after
         * each newline.
         */
        int yy_is_interactive;

        /* Whether we're considered to be at the beginning of a line.
         * If so, '^' rules will be active on the next match, otherwise
         * not.
         */
        int yy_at_bol;

        /* Whether to try to fill the input buffer when we reach the
         * end of it.
         */
        int yy_fill_buffer;

        int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
        /* When an EOF's been seen but there's still some text to process
         * then we mark the buffer as YY_EOF_PENDING, to indicate that we
         * shouldn't try reading from the input source any more.  We might
         * still have a bunch of tokens to match, though, because of
         * possible backing-up.
         *
         * When we actually see the EOF, we change the status to "new"
         * (via yyrestart()), so that the user can continue scanning by
         * just pointing yyin at a new input file.
         */
#define YY_BUFFER_EOF_PENDING 2
        };

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;                /* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;                /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
        { \
        if ( ! yy_current_buffer ) \
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_is_interactive = is_interactive; \
        }

#define yy_set_bol(at_bol) \
        { \
        if ( ! yy_current_buffer ) \
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
        yy_current_buffer->yy_at_bol = at_bol; \
        }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
        yytext_ptr = yy_bp; \
        yyleng = (int) (yy_cp - yy_bp); \
        yy_hold_char = *yy_cp; \
        *yy_cp = '\0'; \
        yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
static yyconst short int yy_accept[261] =
    {   0,
       37,   37,    0,    0,    0,    0,   41,   39,   37,   36,
       29,   30,   38,   39,   39,   19,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   28,   40,
       35,   32,   29,   30,   33,   34,   37,    0,   19,   20,
       20,    0,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       28,    0,   20,    0,   20,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,    0,   20,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,    4,

       26,   26,   26,   26,   26,   26,   23,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   10,
       14,   26,   26,   26,   26,   26,   26,    7,   26,   26,
       26,   26,   26,   26,   26,   12,   26,   26,    0,   31,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        5,   26,   26,   25,   26,   26,   26,   26,   31,   26,

       26,   26,   26,   16,   26,   26,   26,   26,   18,   26,
       26,   26,   26,   26,   26,   11,   26,    1,   26,   26,
       26,   22,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   21,   26,   26,   26,   26,   26,   26,   26,
        9,    0,   27,   26,    6,    8,    2,   26,   15,   26,
       26,   27,   13,   26,   26,    3,   26,   17,   24,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    1,    6,
        7,    1,    8,    9,    8,   10,    1,   11,   12,   13,
       14,   11,   11,   11,   11,   11,   11,    1,    1,    1,
        1,    1,    1,    1,   15,   16,   17,   18,   19,   20,
       21,   21,   22,   21,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   21,   36,   21,
       37,   37,   37,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   21,   48,   49,   50,   51,
       52,   21,   21,   53,   54,   55,   56,   21,   21,   21,
       57,   21,   37,    1,   37,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[58] =
    {   0,
        1,    2,    2,    1,    1,    2,    2,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    2,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst short int yy_base[265] =
    {   0,
        0,    0,   56,   58,   63,   68,  383,  384,  380,  384,
      384,  384,  384,   66,   70,   75,  332,  337,   72,    0,
      332,  327,  330,  354,   68,  319,  335,  346,    0,  384,
      384,  384,  384,  384,  384,  384,  370,   89,   94,   98,
      119,  131,    0,  326,  319,  342,  335,  314,  327,   40,
      325,  315,  322,   71,  336,  328,   67,  321,  304,  336,
        0,  138,  142,  146,  152,  314,  315,  338,  328,  312,
      298,  301,  303,  302,  305,  298,  303,  290,  311,  312,
      291,  284,  298,  292,  320,  156,  160,  297,  290,  312,
      302,   78,  279,  289,  290,  289,  309,  272,  160,    0,

      296,  288,  270,  273,  270,  270,    0,  268,  270,  284,
      299,  274,  267,  268,  263,  161,  275,  260,  269,  257,
      266,  270,  285,  268,  253,  257,  252,  263,  262,  278,
      269,  260,  258,  252,  240,  241,  241,  279,  278,  237,
      246,  247,  242,  264,  259,  271,  233,  241,  242,  233,
      226,  247,  260,  263,  222,  227,  175,  232,  225,    0,
        0,  221,  250,  231,  218,  241,  246,    0,  218,  226,
      214,  221,  213,  241,  235,    0,  108,  217,  177,   95,
      219,  205,  216,  207,  240,  209,  231,  218,  210,  234,
        0,  217,  220,    0,  218,  191,  191,  203,  145,  228,

      185,  184,  189,    0,  186,  204,  199,  185,    0,  190,
      193,  214,  189,  182,  173,    0,  189,    0,  183,  170,
      188,    0,  185,  183,  171,  197,  181,  167,  170,  203,
      184,  177,    0,  202,  164,  169,  176,  197,  154,  155,
        0,  190,  192,  175,    0,    0,    0,  162,    0,  144,
       89,  195,    0,  104,  116,    0,  107,    0,    0,  384,
      199,  202,  112,  205
    } ;

static yyconst short int yy_def[265] =
    {   0,
      260,    1,  261,  261,  262,  262,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  264,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      264,  260,  260,  260,  260,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  260,  260,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,

      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  260,  260,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  260,  263,

      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  260,  260,  263,  263,  263,  263,  263,  263,  263,
      263,  260,  263,  263,  263,  263,  263,  263,  263,    0,
      260,  260,  260,  260
    } ;

static yyconst short int yy_nxt[442] =
    {   0,
        8,    9,   10,   11,   12,   13,   13,   14,   13,   15,
       16,   16,   16,   16,   17,   18,   19,   20,   20,   21,
       20,   22,   20,   23,   24,   20,   20,   25,   26,   27,
       20,   20,   20,   28,   20,   20,    8,    8,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   30,   30,   30,
       30,   30,   30,   30,   30,   32,   33,   34,   35,   36,
       32,   33,   34,   35,   36,   38,   39,   39,   39,   39,
       40,   40,   40,   40,   41,   39,   39,   39,   39,   72,
       73,   56,   30,   42,   30,   46,  199,  199,   47,   40,

       40,   40,   40,   41,   39,   39,   39,   39,   40,   40,
       40,   40,   42,   81,   43,   82,   62,   42,   48,   57,
       49,   77,  196,   50,   78,  259,  112,   51,  258,   63,
       63,   63,   63,  113,  257,  197,   42,   62,   64,  256,
       62,   65,   65,   65,   65,   86,  199,  199,   87,   87,
       87,   87,   63,   63,   63,   63,   65,   65,   65,   65,
       62,   62,   65,   65,   65,   65,   87,   87,   87,   87,
       87,   87,   87,   87,  120,  136,  179,  179,  179,  179,
      180,  255,  180,  254,   62,  242,  242,  253,  137,  243,
      121,  242,  242,  252,  252,  243,  252,  252,  138,   29,

       29,   29,   31,   31,   31,   61,  251,   61,  250,  249,
      248,  247,  246,  245,  244,  241,  240,  239,  238,  237,
      236,  235,  234,  233,  232,  231,  230,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,
      206,  205,  204,  203,  202,  201,  200,  198,  195,  194,
      193,  192,  191,  190,  189,  188,  187,  186,  185,  184,
      183,  182,  181,  178,  177,  176,  175,  174,  173,  172,
      171,  170,  169,  168,  167,  166,  165,  164,  163,  162,
      161,  160,  159,  158,  157,  156,  155,  154,  153,  152,

      151,  150,  149,  148,  147,  146,  145,  144,  143,  142,
      141,  140,  139,  135,  134,  133,  132,  131,  130,  129,
      128,  127,  126,  125,  124,  123,  122,  119,  118,  117,
      116,  115,  114,  111,  110,  109,  108,  107,  106,  105,
      104,  103,  102,  101,  100,   99,   98,   97,   96,   95,
       94,   93,   92,   91,   90,   89,   88,   85,   84,   83,
       80,   79,   76,   75,   74,   71,   70,   69,   68,   67,
       66,   37,   60,   59,   58,   55,   54,   53,   52,   45,
       44,   37,  260,    7,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260
    } ;

static yyconst short int yy_chk[442] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    4,
        4,    3,    3,    4,    4,    5,    5,    5,    5,    5,
        6,    6,    6,    6,    6,   14,   14,   14,   14,   14,
       15,   15,   15,   15,   16,   16,   16,   16,   16,   50,
       50,   25,    3,   16,    4,   19,  180,  180,   19,   38,

       38,   38,   38,   39,   39,   39,   39,   39,   40,   40,
       40,   40,   39,   57,  263,   57,   40,   16,   19,   25,
       19,   54,  177,   19,   54,  257,   92,   19,  255,   41,
       41,   41,   41,   92,  254,  177,   39,   41,   42,  251,
       40,   42,   42,   42,   42,   62,  199,  199,   62,   62,
       62,   62,   63,   63,   63,   63,   64,   64,   64,   64,
       63,   41,   65,   65,   65,   65,   86,   86,   86,   86,
       87,   87,   87,   87,   99,  116,  157,  157,  179,  179,
      157,  250,  179,  248,   63,  231,  231,  244,  116,  231,
       99,  242,  242,  243,  243,  242,  252,  252,  116,  261,

      261,  261,  262,  262,  262,  264,  240,  264,  239,  238,
      237,  236,  235,  234,  232,  230,  229,  228,  227,  226,
      225,  224,  223,  221,  220,  219,  217,  215,  214,  213,
      212,  211,  210,  208,  207,  206,  205,  203,  202,  201,
      200,  198,  197,  196,  195,  193,  192,  190,  189,  188,
      187,  186,  185,  184,  183,  182,  181,  178,  175,  174,
      173,  172,  171,  170,  169,  167,  166,  165,  164,  163,
      162,  159,  158,  156,  155,  154,  153,  152,  151,  150,
      149,  148,  147,  146,  145,  144,  143,  142,  141,  140,
      139,  138,  137,  136,  135,  134,  133,  132,  131,  130,

      129,  128,  127,  126,  125,  124,  123,  122,  121,  120,
      119,  118,  117,  115,  114,  113,  112,  111,  110,  109,
      108,  106,  105,  104,  103,  102,  101,   98,   97,   96,
       95,   94,   93,   91,   90,   89,   88,   85,   84,   83,
       82,   81,   80,   79,   78,   77,   76,   75,   74,   73,
       72,   71,   70,   69,   68,   67,   66,   60,   59,   58,
       56,   55,   53,   52,   51,   49,   48,   47,   46,   45,
       44,   37,   28,   27,   26,   24,   23,   22,   21,   18,
       17,    9,    7,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "benchmark_lexer.l"
#define INITIAL 0
/**************************************************************************
// Copyright (c) 2004  Max-Planck-Institut Saarbruecken (Germany)
// All rights reserved.
//
// This file is part of BenchmarkParser
//
// $URL$
// $Id$
// SPDX-License-Identifier: LGPL-3.0-or-later
//
//
// Author(s) : Lutz Kettner
**************************************************************************/
#line 21 "benchmark_lexer.l"
#include <string>
#include <list>
#include <iostream>
#include <iomanip>
#include <fstream>

/* Use C++ std::string as semantic value to communicate with lexer */
#define YYSTYPE std::string
#include <benchmark_parser.tab.h> // gets definitions from syntax parser

// Public lexer interface, check with decl. in benchmark_parser.h
// --------------------------------------------------------------

// Current input stream and associated values.
std::istream* benchmark_in         = & std::cin;
int           benchmark_linenumber = 1;
std::string   benchmark_filename(    "<cin>");

// Initialize lexer to scan from input stream with name and linenumber.
// The caller is responsible for the lifetime of 'in' that must live
// during the scan.
void benchmark_init_lexer(
    std::istream& in, std::string name, int linenumber = 1);

// Reset lexer to clean state.
void benchmark_reset_lexer();

// Writes a trace of the current include file nesting to the 'out' stream.
// Appends the 'fill' string after each file listed.
void benchmark_include_file_trace( std::ostream& out, std::string fill);


// Private lexer interface, all static to keep it local
// ----------------------------------------------------

// Stack of input streams: the item stored in the stack.
struct Include_stack_item {
    std::istream*    in;         // input stream
    int              linenumber; // linenumber in file for error messages
    std::string      filename;   // filename (or similar string)
    YY_BUFFER_STATE  buffer;     // Opaque pointer to flex-buffer struct.
    Include_stack_item() {}
    Include_stack_item( std::istream* i, int ln, std::string name,
                        YY_BUFFER_STATE  buf)
        : in(i), linenumber(ln), filename(name), buffer(buf) {}
};

// Stack of input streams is a std::list
typedef std::list<Include_stack_item> Include_stack;

// We have one static global variable for the stack and some static functions.
// The include stack is except for the trace() debug function not
// accessible from other files (is not polluting namespaces) since
// the Include() function and the <<EOF>> condition are all handled here.
// The function implementations are at the end of this file.
static Include_stack include_stack;

// Push current state on include_stack, initializes lexer with new file
// input stream, name, and linenumber.
static void open_include_stream(
    std::istream *in, std::string name, int linenumber = 1);

// Shortcut for open file with name and then call open_include_stream.
// Returns false if the file could not be opened successfully.
static bool open_include_file( std::string name, int linenumber = 1);

// Closes current input stream. Initializes lexer with new file input stream,
// name, and linenumber, from the include_stack's top. Pop's an element from
// the include_stack. Returns false if include_stack was empty.
static bool close_include_stream();


// Make the lexer read from benchmark_in instead of yyin
#define YY_INPUT(buf,result,max_size) { \
    benchmark_in->read( buf, max_size);  \
    result = benchmark_in->gcount();     \
}

// Count newlines in the string s
static void count_newlines( const char* s) {
    while ( *s) {
        if ( *s == '\n')
            ++benchmark_linenumber;
        ++s;
    }
}

static int  comment_nesting = 0; // counts nesting depth of () in Comments

#define YY_BREAK  /* a do nothing */

/* --------------------------------------------------------------------
    Parsing Modes:
      --  INITIAL:      main mode for sequence of tokens
      --  IncludeMode:  parses lciInclude filename,
      --  CommentMode:  Comment(...) parsing of nested parantheses
                        # comments and strings are correctly ignored
-------------------------------------------------------------------- */
#define IncludeMode 1

#define CommentMode 2

/* An fnumber consists of up to three parts:
 *  1) a sign [+-]
 *  2) a mantissa (digits [0-9] with at most one dot in between)
 *  3) an exponent [eE]{integer}
 *
 *  Part 1) is optional.
 *  Part 2) must contain at least one digit,
 *          but may have leading or trailing dot
 *  Part 3) is optional iff the mantissa contains a dot
 *          (so that fnumbers and integers remain distinguishable).
 */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
        if ( yy_current_buffer->yy_is_interactive ) \
                { \
                int c = '*', n; \
                for ( n = 0; n < max_size && \
                             (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
                        buf[n] = (char) c; \
                if ( c == '\n' ) \
                        buf[n++] = (char) c; \
                if ( c == EOF && ferror( yyin ) ) \
                        YY_FATAL_ERROR( "input in flex scanner failed" ); \
                result = n; \
                } \
        else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
                  && ferror( yyin ) ) \
                YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
        YY_USER_ACTION

YY_DECL
        {
        yy_state_type yy_current_state;
        char *yy_cp = NULL, *yy_bp = NULL;
        int yy_act;

#line 148 "benchmark_lexer.l"

 /* Tokens    */
 /* --------- */

        if ( yy_init )
                {
                yy_init = 0;

#ifdef YY_USER_INIT
                YY_USER_INIT;
#endif

                if ( ! yy_start )
                        yy_start = 1;        /* first start state */

                if ( ! yyin )
                        yyin = stdin;

                if ( ! yyout )
                        yyout = stdout;

                if ( ! yy_current_buffer )
                        yy_current_buffer =
                                yy_create_buffer( yyin, YY_BUF_SIZE );

                yy_load_buffer_state();
                }

        while ( 1 )                /* loops until end-of-file is reached */
                {
                yy_cp = yy_c_buf_p;

                /* Support of yytext. */
                *yy_cp = yy_hold_char;

                /* yy_bp points to the position in yy_ch_buf of the start of
                 * the current run.
                 */
                yy_bp = yy_cp;

                yy_current_state = yy_start;
yy_match:
                do
                        {
                        YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
                        if ( yy_accept[yy_current_state] )
                                {
                                yy_last_accepting_state = yy_current_state;
                                yy_last_accepting_cpos = yy_cp;
                                }
                        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                                {
                                yy_current_state = (int) yy_def[yy_current_state];
                                if ( yy_current_state >= 261 )
                                        yy_c = yy_meta[(unsigned int) yy_c];
                                }
                        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                        ++yy_cp;
                        }
                while ( yy_base[yy_current_state] != 384 );

yy_find_action:
                yy_act = yy_accept[yy_current_state];
                if ( yy_act == 0 )
                        { /* have to back up */
                        yy_cp = yy_last_accepting_cpos;
                        yy_current_state = yy_last_accepting_state;
                        yy_act = yy_accept[yy_current_state];
                        }

                YY_DO_BEFORE_ACTION;


do_action:        /* This label is used only to access EOF actions. */


                switch ( yy_act )
        { /* beginning of action switch */
                        case 0: /* must back up */
                        /* undo the effects of YY_DO_BEFORE_ACTION */
                        *yy_cp = yy_hold_char;
                        yy_cp = yy_last_accepting_cpos;
                        yy_current_state = yy_last_accepting_state;
                        goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 151 "benchmark_lexer.l"
{ return FileFormat;}
        YY_BREAK
case 2:
YY_RULE_SETUP
#line 152 "benchmark_lexer.l"
{ return BenchmarkName; }
        YY_BREAK
case 3:
YY_RULE_SETUP
#line 153 "benchmark_lexer.l"
{ return Classification; }
        YY_BREAK
case 4:
YY_RULE_SETUP
#line 154 "benchmark_lexer.l"
{ return List; }
        YY_BREAK
case 5:
YY_RULE_SETUP
#line 155 "benchmark_lexer.l"
{ return Rational; }
        YY_BREAK
case 6:
YY_RULE_SETUP
#line 156 "benchmark_lexer.l"
{ return Polynomial_1; }
        YY_BREAK
case 7:
YY_RULE_SETUP
#line 157 "benchmark_lexer.l"
{ return Point_2; }
        YY_BREAK
case 8:
YY_RULE_SETUP
#line 158 "benchmark_lexer.l"
{ return AlgebraicReal; }
        YY_BREAK
case 9:
YY_RULE_SETUP
#line 161 "benchmark_lexer.l"
{ return ConicPoint_2; }
        YY_BREAK
case 10:
YY_RULE_SETUP
#line 162 "benchmark_lexer.l"
{ return Conic_2; }
        YY_BREAK
case 11:
YY_RULE_SETUP
#line 165 "benchmark_lexer.l"
{ return ConicArc_2; }
        YY_BREAK
case 12:
YY_RULE_SETUP
#line 166 "benchmark_lexer.l"
{ return Circle_2; }
        YY_BREAK
case 13:
YY_RULE_SETUP
#line 167 "benchmark_lexer.l"
{ return LineSegment_2; }
        YY_BREAK
case 14:
YY_RULE_SETUP
#line 168 "benchmark_lexer.l"
{ return Cubic_2; }
        YY_BREAK
case 15:
YY_RULE_SETUP
#line 169 "benchmark_lexer.l"
{ return CircularArc_2;}
        YY_BREAK
case 16:
YY_RULE_SETUP
#line 170 "benchmark_lexer.l"
{ return LineArc_2;}
        YY_BREAK
case 17:
YY_RULE_SETUP
#line 171 "benchmark_lexer.l"
{return CircularPoint_2;}
        YY_BREAK
case 18:
YY_RULE_SETUP
#line 172 "benchmark_lexer.l"
{ return Quadric_3; }
        YY_BREAK
/* Integer numbers and float numbers */
/* --------------------------------- */
case 19:
YY_RULE_SETUP
#line 177 "benchmark_lexer.l"
{ yylval = std::string( yytext);
                                  return INTEGER;
                                }
        YY_BREAK
case 20:
YY_RULE_SETUP
#line 180 "benchmark_lexer.l"
{ yylval = std::string( yytext);
                                  return FNUMBER;
                                }
        YY_BREAK
case 21:
YY_RULE_SETUP
#line 183 "benchmark_lexer.l"
{ yylval = std::string( yytext);
                                  return MINUS_INFTY;
                                }
        YY_BREAK
case 22:
YY_RULE_SETUP
#line 186 "benchmark_lexer.l"
{ yylval = std::string( yytext);
                                  return PLUS_INFTY;
                                }
        YY_BREAK
case 23:
YY_RULE_SETUP
#line 189 "benchmark_lexer.l"
{ yylval = std::string( yytext);
                                  return VOID;
                                }
        YY_BREAK
case 24:
YY_RULE_SETUP
#line 192 "benchmark_lexer.l"
{ yylval = std::string( yytext);
                                  return COUNTERCLOCKWISE;
                                }
        YY_BREAK
case 25:
YY_RULE_SETUP
#line 195 "benchmark_lexer.l"
{ yylval = std::string( yytext);
                                  return CLOCKWISE;
                                }
        YY_BREAK
/* Non-recognized tokens are errors */
/* -------------------------------- */
case 26:
YY_RULE_SETUP
#line 202 "benchmark_lexer.l"
{ yylval = std::string( yytext);
                                  return UNKNOWN_TOKEN;
                                }
        YY_BREAK
/* Handle include files      */
/* ------------------------- */
case 27:
YY_RULE_SETUP
#line 208 "benchmark_lexer.l"
{ BEGIN( IncludeMode);
                                  count_newlines( yytext);
                                  break;
                                }
        YY_BREAK
case 28:
YY_RULE_SETUP
#line 212 "benchmark_lexer.l"
{ /* remove remaining chars before the ')' */
                                  int c = yyinput();
                                  while( c != EOF && c != ')') {
                                      if ( c == '\n')
                                          ++benchmark_linenumber;
                                      c = yyinput();
                                  }
                                  BEGIN( INITIAL);
                                  if ( c == EOF) {
                                      yylval = std::string( "Reached EOF while"
                                          " parsing include filename '") +
                                          std::string( yytext) +
                                          std::string( "'.");
                                      return ERROR;
                                  }
                                  open_include_file( yytext);
                                  break;
                                }
        YY_BREAK
/* Strings with quoted \" and \\  */
/* ------------------------------ */
case 29:
YY_RULE_SETUP
#line 233 "benchmark_lexer.l"
{ int c = yyinput();
                                  yylval = std::string("");
                                  bool quoted_char = false;
                                  while (c != EOF && (c!='"' || quoted_char)){
                                      if ( c == '\n')
                                          ++benchmark_linenumber;
                                      if ( ! quoted_char && c == '\\') {
                                          quoted_char = true;
                                      } else {
                                          quoted_char = false;
                                          yylval.push_back( char(c));
                                      }
                                      c = yyinput();
                                  }
                                  if ( c == EOF) {
                                      yylval = std::string( "Reached EOF while"
                                          " parsing string constant '") +
                                          yylval + std::string( "'.");
                                      BEGIN( INITIAL);
                                      return ERROR;
                                  }
                                  if ( YY_START == INITIAL) {
                                      return STRING;
                                  }
                                  yylval = std::string("");
                                  break;
                                }
        YY_BREAK
/* One line comment starting with # */
/* -------------------------------- */
case 30:
YY_RULE_SETUP
#line 263 "benchmark_lexer.l"
{ /* remove remaining chars before the '\n' */
                                  int c = yyinput();
                                  while( c != EOF && c != '\n') {
                                      c = yyinput();
                                  }
                                  if ( c == '\n')
                                      ++benchmark_linenumber;
                                  break;
                                }
        YY_BREAK
/* Nestable and multi-line Comment( ... ) */
/* -------------------------------------- */
case 31:
YY_RULE_SETUP
#line 275 "benchmark_lexer.l"
{ BEGIN( CommentMode);
                                  comment_nesting = 1;
                                  count_newlines( yytext);
                                  break;
                                }
        YY_BREAK
case 32:
YY_RULE_SETUP
#line 281 "benchmark_lexer.l"
{ ++benchmark_linenumber; break; }
        YY_BREAK
case 33:
YY_RULE_SETUP
#line 283 "benchmark_lexer.l"
{ ++comment_nesting; break; }
        YY_BREAK
case 34:
YY_RULE_SETUP
#line 285 "benchmark_lexer.l"
{ if ( --comment_nesting == 0)
                                      BEGIN( INITIAL);
                                  break;
                                }
        YY_BREAK
case YY_STATE_EOF(CommentMode):
#line 290 "benchmark_lexer.l"
{ yylval = std::string( "Reached EOF while "
                                    "parsing 'Comment(...)'.");
                                  BEGIN( INITIAL);
                                  return ERROR;
                                }
        YY_BREAK
case 35:
YY_RULE_SETUP
#line 296 "benchmark_lexer.l"
{ break; }
        YY_BREAK
/* Count line numbers for good error messages */
case 36:
YY_RULE_SETUP
#line 299 "benchmark_lexer.l"
{ ++benchmark_linenumber; break; }
        YY_BREAK
/* Ignore white spaces */
case 37:
YY_RULE_SETUP
#line 302 "benchmark_lexer.l"
{ break; }
        YY_BREAK
/* stop scanning at EOF, maybe continue with surrounding file */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IncludeMode):
#line 305 "benchmark_lexer.l"
{ yyterminate(); }
        YY_BREAK
/* single characters passed to the parser: */
case 38:
YY_RULE_SETUP
#line 308 "benchmark_lexer.l"
{ return yytext[0]; }
        YY_BREAK
/* all other single characters are errors */
case 39:
YY_RULE_SETUP
#line 311 "benchmark_lexer.l"
{ yylval = std::string( "Found illegal char '")
                                    + std::string( yytext) + std::string("'.");
                                  return ERROR;
                                }
        YY_BREAK
case 40:
YY_RULE_SETUP
#line 316 "benchmark_lexer.l"
ECHO;
        YY_BREAK

        case YY_END_OF_BUFFER:
                {
                /* Amount of text matched not including the EOB char. */
                int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

                /* Undo the effects of YY_DO_BEFORE_ACTION. */
                *yy_cp = yy_hold_char;
                YY_RESTORE_YY_MORE_OFFSET

                if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
                        {
                        /* We're scanning a new file or input source.  It's
                         * possible that this happened because the user
                         * just pointed yyin at a new source and called
                         * yylex().  If so, then we have to assure
                         * consistency between yy_current_buffer and our
                         * globals.  Here is the right place to do so, because
                         * this is the first action (other than possibly a
                         * back-up) that will match for the new input source.
                         */
                        yy_n_chars = yy_current_buffer->yy_n_chars;
                        yy_current_buffer->yy_input_file = yyin;
                        yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
                        }

                /* Note that here we test for yy_c_buf_p "<=" to the position
                 * of the first EOB in the buffer, since yy_c_buf_p will
                 * already have been incremented past the NUL character
                 * (since all states make transitions on EOB to the
                 * end-of-buffer state).  Contrast this with the test
                 * in input().
                 */
                if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                        { /* This was really a NUL. */
                        yy_state_type yy_next_state;

                        yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state();

                        /* Okay, we're now positioned to make the NUL
                         * transition.  We couldn't have
                         * yy_get_previous_state() go ahead and do it
                         * for us because it doesn't know how to deal
                         * with the possibility of jamming (and we don't
                         * want to build jamming into it because then it
                         * will run more slowly).
                         */

                        yy_next_state = yy_try_NUL_trans( yy_current_state );

                        yy_bp = yytext_ptr + YY_MORE_ADJ;

                        if ( yy_next_state )
                                {
                                /* Consume the NUL. */
                                yy_cp = ++yy_c_buf_p;
                                yy_current_state = yy_next_state;
                                goto yy_match;
                                }

                        else
                                {
                                yy_cp = yy_c_buf_p;
                                goto yy_find_action;
                                }
                        }

                else switch ( yy_get_next_buffer() )
                        {
                        case EOB_ACT_END_OF_FILE:
                                {
                                yy_did_buffer_switch_on_eof = 0;

                                if ( yywrap() )
                                        {
                                        /* Note: because we've taken care in
                                         * yy_get_next_buffer() to have set up
                                         * yytext, we can now set up
                                         * yy_c_buf_p so that if some total
                                         * hoser (like flex itself) wants to
                                         * call the scanner after we return the
                                         * YY_NULL, it'll still work - another
                                         * YY_NULL will get returned.
                                         */
                                        yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                                        yy_act = YY_STATE_EOF(YY_START);
                                        goto do_action;
                                        }

                                else
                                        {
                                        if ( ! yy_did_buffer_switch_on_eof )
                                                YY_NEW_FILE;
                                        }
                                break;
                                }

                        case EOB_ACT_CONTINUE_SCAN:
                                yy_c_buf_p =
                                        yytext_ptr + yy_amount_of_matched_text;

                                yy_current_state = yy_get_previous_state();

                                yy_cp = yy_c_buf_p;
                                yy_bp = yytext_ptr + YY_MORE_ADJ;
                                goto yy_match;

                        case EOB_ACT_LAST_MATCH:
                                yy_c_buf_p =
                                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                                yy_current_state = yy_get_previous_state();

                                yy_cp = yy_c_buf_p;
                                yy_bp = yytext_ptr + YY_MORE_ADJ;
                                goto yy_find_action;
                        }
                break;
                }

        default:
                YY_FATAL_ERROR(
                        "fatal flex scanner internal error--no action found" );
        } /* end of action switch */
                } /* end of scanning one token */
        } /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *        EOB_ACT_LAST_MATCH -
 *        EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *        EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
        {
        char *dest = yy_current_buffer->yy_ch_buf;
        char *source = yytext_ptr;
        int number_to_move, i;
        int ret_val;

        if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
                YY_FATAL_ERROR(
                "fatal flex scanner internal error--end of buffer missed" );

        if ( yy_current_buffer->yy_fill_buffer == 0 )
                { /* Don't try to fill the buffer, so this is an EOF. */
                if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
                        {
                        /* We matched a single character, the EOB, so
                         * treat this as a final EOF.
                         */
                        return EOB_ACT_END_OF_FILE;
                        }

                else
                        {
                        /* We matched some text prior to the EOB, first
                         * process it.
                         */
                        return EOB_ACT_LAST_MATCH;
                        }
                }

        /* Try to read more data. */

        /* First move last chars to start of buffer. */
        number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

        for ( i = 0; i < number_to_move; ++i )
                *(dest++) = *(source++);

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
                /* don't do the read, it's not guaranteed to return an EOF,
                 * just force an EOF
                 */
                yy_current_buffer->yy_n_chars = yy_n_chars = 0;

        else
                {
                int num_to_read =
                        yy_current_buffer->yy_buf_size - number_to_move - 1;

                while ( num_to_read <= 0 )
                        { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
                        YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

                        /* just a shorter name for the current buffer */
                        YY_BUFFER_STATE b = yy_current_buffer;

                        int yy_c_buf_p_offset =
                                (int) (yy_c_buf_p - b->yy_ch_buf);

                        if ( b->yy_is_our_buffer )
                                {
                                int new_size = b->yy_buf_size * 2;

                                if ( new_size <= 0 )
                                        b->yy_buf_size += b->yy_buf_size / 8;
                                else
                                        b->yy_buf_size *= 2;

                                b->yy_ch_buf = (char *)
                                        /* Include room in for 2 EOB chars. */
                                        yy_flex_realloc( (void *) b->yy_ch_buf,
                                                         b->yy_buf_size + 2 );
                                }
                        else
                                /* Can't grow it, we don't own it. */
                                b->yy_ch_buf = 0;

                        if ( ! b->yy_ch_buf )
                                YY_FATAL_ERROR(
                                "fatal error - scanner input buffer overflow" );

                        yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

                        num_to_read = yy_current_buffer->yy_buf_size -
                                                number_to_move - 1;
#endif
                        }

                if ( num_to_read > YY_READ_BUF_SIZE )
                        num_to_read = YY_READ_BUF_SIZE;

                /* Read in more data. */
                YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
                        yy_n_chars, num_to_read );

                yy_current_buffer->yy_n_chars = yy_n_chars;
                }

        if ( yy_n_chars == 0 )
                {
                if ( number_to_move == YY_MORE_ADJ )
                        {
                        ret_val = EOB_ACT_END_OF_FILE;
                        yyrestart( yyin );
                        }

                else
                        {
                        ret_val = EOB_ACT_LAST_MATCH;
                        yy_current_buffer->yy_buffer_status =
                                YY_BUFFER_EOF_PENDING;
                        }
                }

        else
                ret_val = EOB_ACT_CONTINUE_SCAN;

        yy_n_chars += number_to_move;
        yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
        yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

        yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

        return ret_val;
        }


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
        {
        yy_state_type yy_current_state;
        char *yy_cp;

        yy_current_state = yy_start;

        for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
                {
                YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
                if ( yy_accept[yy_current_state] )
                        {
                        yy_last_accepting_state = yy_current_state;
                        yy_last_accepting_cpos = yy_cp;
                        }
                while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                        {
                        yy_current_state = (int) yy_def[yy_current_state];
                        if ( yy_current_state >= 261 )
                                yy_c = yy_meta[(unsigned int) yy_c];
                        }
                yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                }

        return yy_current_state;
        }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *        next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
        {
        int yy_is_jam;
        char *yy_cp = yy_c_buf_p;

        YY_CHAR yy_c = 1;
        if ( yy_accept[yy_current_state] )
                {
                yy_last_accepting_state = yy_current_state;
                yy_last_accepting_cpos = yy_cp;
                }
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                yy_current_state = (int) yy_def[yy_current_state];
                if ( yy_current_state >= 261 )
                        yy_c = yy_meta[(unsigned int) yy_c];
                }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        yy_is_jam = (yy_current_state == 260);

        return yy_is_jam ? 0 : yy_current_state;
        }


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
char *yy_bp;
#endif
        {
        char *yy_cp = yy_c_buf_p;

        /* undo effects of setting up yytext */
        *yy_cp = yy_hold_char;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                { /* need to shift things up to make room */
                /* +2 for EOB chars. */
                int number_to_move = yy_n_chars + 2;
                char *dest = &yy_current_buffer->yy_ch_buf[
                                        yy_current_buffer->yy_buf_size + 2];
                char *source =
                                &yy_current_buffer->yy_ch_buf[number_to_move];

                while ( source > yy_current_buffer->yy_ch_buf )
                        *--dest = *--source;

                yy_cp += (int) (dest - source);
                yy_bp += (int) (dest - source);
                yy_current_buffer->yy_n_chars =
                        yy_n_chars = yy_current_buffer->yy_buf_size;

                if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
                        YY_FATAL_ERROR( "flex scanner push-back overflow" );
                }

        *--yy_cp = (char) c;


        yytext_ptr = yy_bp;
        yy_hold_char = *yy_cp;
        yy_c_buf_p = yy_cp;
        }
#endif        /* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
        {
        int c;

        *yy_c_buf_p = yy_hold_char;

        if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
                {
                /* yy_c_buf_p now points to the character we want to return.
                 * If this occurs *before* the EOB characters, then it's a
                 * valid NUL; if not, then we've hit the end of the buffer.
                 */
                if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
                        /* This was really a NUL. */
                        *yy_c_buf_p = '\0';

                else
                        { /* need more input */
                        int offset = yy_c_buf_p - yytext_ptr;
                        ++yy_c_buf_p;

                        switch ( yy_get_next_buffer() )
                                {
                                case EOB_ACT_LAST_MATCH:
                                        /* This happens because yy_g_n_b()
                                         * sees that we've accumulated a
                                         * token and flags that we need to
                                         * try matching the token before
                                         * proceeding.  But for input(),
                                         * there's no matching to consider.
                                         * So convert the EOB_ACT_LAST_MATCH
                                         * to EOB_ACT_END_OF_FILE.
                                         */

                                        /* Reset buffer status. */
                                        yyrestart( yyin );

                                        /* fall through */

                                case EOB_ACT_END_OF_FILE:
                                        {
                                        if ( yywrap() )
                                                return EOF;

                                        if ( ! yy_did_buffer_switch_on_eof )
                                                YY_NEW_FILE;
#ifdef __cplusplus
                                        return yyinput();
#else
                                        return input();
#endif
                                        }

                                case EOB_ACT_CONTINUE_SCAN:
                                        yy_c_buf_p = yytext_ptr + offset;
                                        break;
                                }
                        }
                }

        c = *(unsigned char *) yy_c_buf_p;        /* cast for 8-bit char's */
        *yy_c_buf_p = '\0';        /* preserve yytext */
        yy_hold_char = *++yy_c_buf_p;


        return c;
        }
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
        {
        if ( ! yy_current_buffer )
                yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_init_buffer( yy_current_buffer, input_file );
        yy_load_buffer_state();
        }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
        {
        if ( yy_current_buffer == new_buffer )
                return;

        if ( yy_current_buffer )
                {
                /* Flush out information for old buffer. */
                *yy_c_buf_p = yy_hold_char;
                yy_current_buffer->yy_buf_pos = yy_c_buf_p;
                yy_current_buffer->yy_n_chars = yy_n_chars;
                }

        yy_current_buffer = new_buffer;
        yy_load_buffer_state();

        /* We don't actually know whether we did this switch during
         * EOF (yywrap()) processing, but the only time this flag
         * is looked at is after yywrap() is called, so it's safe
         * to go ahead and always set it.
         */
        yy_did_buffer_switch_on_eof = 1;
        }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
        {
        yy_n_chars = yy_current_buffer->yy_n_chars;
        yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
        yyin = yy_current_buffer->yy_input_file;
        yy_hold_char = *yy_c_buf_p;
        }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
        {
        YY_BUFFER_STATE b;

        b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
        if ( ! b )
                YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

        b->yy_buf_size = size;

        /* yy_ch_buf has to be 2 characters longer than the size given because
         * we need to put in 2 end-of-buffer characters.
         */
        b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
        if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

        b->yy_is_our_buffer = 1;

        yy_init_buffer( b, file );

        return b;
        }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
        {
        if ( ! b )
                return;

        if ( b == yy_current_buffer )
                yy_current_buffer = (YY_BUFFER_STATE) 0;

        if ( b->yy_is_our_buffer )
                yy_flex_free( (void *) b->yy_ch_buf );

        yy_flex_free( (void *) b );
        }



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


        {
        yy_flush_buffer( b );

        b->yy_input_file = file;
        b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
        b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
        b->yy_is_interactive = 0;
#else
        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
        }


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

        {
        if ( ! b )
                return;

        b->yy_n_chars = 0;

        /* We always need two end-of-buffer characters.  The first causes
         * a transition to the end-of-buffer state.  The second causes
         * a jam in that state.
         */
        b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
        b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

        b->yy_buf_pos = &b->yy_ch_buf[0];

        b->yy_at_bol = 1;
        b->yy_buffer_status = YY_BUFFER_NEW;

        if ( b == yy_current_buffer )
                yy_load_buffer_state();
        }


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
        {
        YY_BUFFER_STATE b;

        if ( size < 2 ||
             base[size-2] != YY_END_OF_BUFFER_CHAR ||
             base[size-1] != YY_END_OF_BUFFER_CHAR )
                /* They forgot to leave room for the EOB's. */
                return 0;

        b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
        if ( ! b )
                YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

        b->yy_buf_size = size - 2;        /* "- 2" to take care of EOB's */
        b->yy_buf_pos = b->yy_ch_buf = base;
        b->yy_is_our_buffer = 0;
        b->yy_input_file = 0;
        b->yy_n_chars = b->yy_buf_size;
        b->yy_is_interactive = 0;
        b->yy_at_bol = 1;
        b->yy_fill_buffer = 0;
        b->yy_buffer_status = YY_BUFFER_NEW;

        yy_switch_to_buffer( b );

        return b;
        }
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
        {
        int len;
        for ( len = 0; yy_str[len]; ++len )
                ;

        return yy_scan_bytes( yy_str, len );
        }
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
        {
        YY_BUFFER_STATE b;
        char *buf;
        yy_size_t n;
        int i;

        /* Get memory for full buffer, including space for trailing EOB's. */
        n = len + 2;
        buf = (char *) yy_flex_alloc( n );
        if ( ! buf )
                YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

        for ( i = 0; i < len; ++i )
                buf[i] = bytes[i];

        buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

        b = yy_scan_buffer( buf, n );
        if ( ! b )
                YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

        /* It's okay to grow etc. this buffer, and we should throw it
         * away when we're done.
         */
        b->yy_is_our_buffer = 1;

        return b;
        }
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
        {
        if ( yy_start_stack_ptr >= yy_start_stack_depth )
                {
                yy_size_t new_size;

                yy_start_stack_depth += YY_START_STACK_INCR;
                new_size = yy_start_stack_depth * sizeof( int );

                if ( ! yy_start_stack )
                        yy_start_stack = (int *) yy_flex_alloc( new_size );

                else
                        yy_start_stack = (int *) yy_flex_realloc(
                                        (void *) yy_start_stack, new_size );

                if ( ! yy_start_stack )
                        YY_FATAL_ERROR(
                        "out of memory expanding start-condition stack" );
                }

        yy_start_stack[yy_start_stack_ptr++] = YY_START;

        BEGIN(new_state);
        }
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
        {
        if ( --yy_start_stack_ptr < 0 )
                YY_FATAL_ERROR( "start-condition stack underflow" );

        BEGIN(yy_start_stack[yy_start_stack_ptr]);
        }
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
        {
        return yy_start_stack[yy_start_stack_ptr - 1];
        }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
        {
        (void) fprintf( stderr, "%s\n", msg );
        exit( YY_EXIT_FAILURE );
        }



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
        do \
                { \
                /* Undo effects of setting up yytext. */ \
                yytext[yyleng] = yy_hold_char; \
                yy_c_buf_p = yytext + n; \
                yy_hold_char = *yy_c_buf_p; \
                *yy_c_buf_p = '\0'; \
                yyleng = n; \
                } \
        while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
        {
        int i;
        for ( i = 0; i < n; ++i )
                s1[i] = s2[i];
        }
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
        {
        int n;
        for ( n = 0; s[n]; ++n )
                ;

        return n;
        }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
        {
        return (void *) malloc( size );
        }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
        {
        /* The cast to (char *) in the following accommodates both
         * implementations that use char* generic pointers, and those
         * that use void* generic pointers.  It works with the latter
         * because both ANSI C and C++ allow castless assignment from
         * any pointer type to void*, and deal with argument conversions
         * as though doing an assignment.
         */
        return (void *) realloc( (char *) ptr, size );
        }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
        {
        free( ptr );
        }

#if YY_MAIN
int main()
        {
        yylex();
        return 0;
        }
#endif
#line 316 "benchmark_lexer.l"


// implements the proper EOF behavior, pop's file from include stack
extern "C" int yywrap() {
    if ( close_include_stream())
        return 0; // there was a file waiting on the stack, we continue scan
    return 1; // no file in the stack left, we stop scan
}

// Push current state on include_stack, initializes lexer with new file
// input stream, name, and linenumber.
static void open_include_stream( std::istream *in, std::string name,
                                 int linenumber)
{
    include_stack.push_front( Include_stack_item(
        benchmark_in, benchmark_linenumber, benchmark_filename,
        YY_CURRENT_BUFFER));
    benchmark_in = in;
    benchmark_linenumber = linenumber;
    benchmark_filename = name;
    yy_switch_to_buffer( yy_create_buffer( 0, YY_BUF_SIZE));
}

// Shortcut for open file with name and then call open_include_stream.
// Returns false if the file could not be opened successfully.
static bool open_include_file( std::string name, int linenumber) {
    std::ifstream* in = new std::ifstream( name.c_str());
    if ( ! *in) {
        delete in;
        return false;
    }
    open_include_stream( in, name, linenumber);
    return true;
}

// Closes current input stream. Initializes lexer with new file input stream,
// name, and linenumber, from the include_stack's top. Pop's an element from
// the include_stack. Returns false if include_stack was empty.
static bool close_include_stream() {
    if ( include_stack.empty())
        return false;
    delete benchmark_in; // closes the stream
    benchmark_in         = include_stack.front().in;
    benchmark_linenumber = include_stack.front().linenumber;
    benchmark_filename   = include_stack.front().filename;
    yy_delete_buffer( YY_CURRENT_BUFFER);
    yy_switch_to_buffer( include_stack.front().buffer);
    include_stack.pop_front();
    return true;
}

// Public interface of the lexer component
// ---------------------------------------

// Initialize lexer to scan from input stream with name and linenumber.
// The caller is responsible for the lifetime of 'in' that must last
// during the scan.
void benchmark_init_lexer(
    std::istream& in, std::string name, int linenumber)
{
    benchmark_reset_lexer();
    benchmark_in = & in;
    benchmark_linenumber = linenumber;
    benchmark_filename = name;
    yy_switch_to_buffer( yy_create_buffer( 0, YY_BUF_SIZE));
}

// reset lexer to clean state. Can be used to parse another file then.
void benchmark_reset_lexer() {
    while( close_include_stream()) // close all pre-existing include files
        ; // empty while body
    benchmark_in         = & std::cin;
    benchmark_linenumber = 1;
    benchmark_filename   = std::string("<cin>");
    yyrestart(0);
    BEGIN( INITIAL);
};

// Writes a trace of the current include file nesting to the 'out' stream.
void benchmark_include_file_trace( std::ostream& out, std::string fill) {
    std::size_t n = include_stack.size();
    for ( Include_stack::const_iterator i = include_stack.begin();
          i != include_stack.end(); ++i)
    {
        out << std::setw(3) << n-- << ": '" << i->filename << "' line "
            << i->linenumber << fill << std::endl;
    }
}

// This summy function is only here to suppress a warning for
// an unused yyunput function
void benchmark_parser_dummy_no_warn_() {
    yyunput( 1, 0);
}

// EOF

